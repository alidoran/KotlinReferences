webhook:
VPS:
cd /path/to/your/webhook-server
git clone https://github.com/alidoran/ServerReferences.git
cd ServerReferences
sudo apt update
sudo apt install nodejs npm
sudo npm install -g pm2
npm install express body-parser
nano server.js ->

const http = require('http');
const { exec } = require('child_process');

const server = http.createServer((req, res) => {
  console.log('Received request:', req.method);  // Log method (should be POST)

  if (req.method === 'POST') {
    let body = '';

    req.on('data', chunk => {
      body += chunk;
    });

    req.on('end', () => {
      console.log('Received body:', body);  // Log the body received from the request

      try {
        const payload = JSON.parse(body);
        console.log('Parsed payload:', payload);  // Log the parsed payload

        if (payload.ref === 'refs/heads/main') {
          console.log('Main branch push detected');

          // Ensure paths and commands are fully qualifie
          exec(
            'cd /root/ServerReferences && ' +
            '/usr/bin/git fetch origin && ' +
            '/usr/bin/git stash && ' +
            '/usr/bin/git reset --hard origin/main && ' +
            "/usr/bin/pm2 reload ktor-server " ,
            (err, stdout, stderr) => {
              if (err) {
                console.error('Exec error:', stderr);  // Log exec error
                res.statusCode = 500;
                res.end(`Error: ${stderr}`);
                return;
              }
              console.log('Deployment completed:', stdout);  // Log successful deployment
              res.statusCode = 200;
              res.end(`Deployment completed: ${stdout}`);
          });
        } else {
          console.log('Not a main branch push');
          res.statusCode = 200;
          res.end('Not a main branch push.');
        }
      } catch (error) {
        console.error('Error parsing payload:', error);  // Log parsing error
        res.statusCode = 400;
        res.end('Invalid JSON');
      }
    });
  } else {
    res.statusCode = 405;
    res.end('Method Not Allowed');
  }
});

// Listen on IPv4
server.listen(3001, '0.0.0.0', () => {
  console.log('Listening for webhooks on port 3001 (IPv4)...');
});

cntl X
pm2 start server.js
pm2 status
sudo apt install nginx
sudo systemctl start nginx
sudo systemctl enable nginx
sudo systemctl status nginx
sudo ufw allow 'Nginx Full'
sudo nano /etc/nginx/sites-available/default
// Add the following block to forward requests to the webhook handler: ->
server {
    listen 8081;
    server_name your_server_domain_or_IP;

    location /github-webhook {
        proxy_pass http://localhost:3000/github-webhook;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}

cntl X
sudo nginx -t
sudo systemctl reload nginx
sudo ln -s /usr/local/bin/pm2 /usr/bin/pm2
Test -> curl -X POST http://45.61.134.158:8081 -d '{"ref": "refs/heads/main"}' -H "Content-Type: application/json"
Logs -> pm2 logs

/usr/bin/pm2 start "java -jar /root/ServerReferences/jar-compile/ServerReferences-all.jar" --name ktor-server


GitHub:
Go to your GitHub repository (ServerReferences) settings.
Under Webhooks, click Add webhook.
Set the Payload URL to: ->
http://your_server_domain_or_IP:8081/github-webhook
Set Content type to -> application/json.
Select the events you want (e.g., "push").
Click Add webhook to save.



Additional helpful commands:
sudo nano /etc/nginx/sites-enabled/default
sudo nano ~/ServerReferences/webhook_listener.js

pm2 restart webhook_listener ktor-server
pm2 status
pm2 logs webhook_listener
pm2 start ~/ServerReferences/webhook_listener.js


sudo systemctl status nginx
sudo systemctl restart nginx

sudo fuser -k 8081/tcp 8082/tcp 3000/tcp 3001/tcp

sudo systemctl list-units --type=service
sudo systemctl disable <service_name>

/usr/bin/pm2 start "java -jar /root/ServerReferences/build/libs/ServerReferences-all.jar" --name ktor-server

sudo lsof -i :8082
sudo kill -9 32485
