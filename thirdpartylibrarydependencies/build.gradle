plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-kapt'
    id 'kotlin-android'
    id("com.apollographql.apollo3").version("3.3.2")
    //FireBase
    id 'com.google.gms.google-services'
    id 'com.google.firebase.crashlytics'
    id 'com.google.android.libraries.mapsplatform.secrets-gradle-plugin'
}

android {
    compileSdk rootProject.compile_target_sdk

    defaultConfig {
        applicationId "alidoran.third_party"
        minSdk rootProject.compile_min_sdk
        targetSdk rootProject.compile_target_sdk
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = '17'
    }


    buildFeatures {
        viewBinding true
    }

//    composeOptions {
//        kotlinCompilerExtensionVersion = "1.8.20"
//    }

    testOptions {
        unitTests.all {
            useJUnitPlatform()
            systemProperty "junit.jupiter.testinstance.lifecycle.default", "per_method"
            //Test default instance will be changed by this line
            systemProperty "junit.jupiter.execution.parallel.enabled", "true"
        }
    }
    namespace 'alidoran.third_party'
}

dependencies {
    implementation project(":commonlibrary")
    implementation "androidx.core:core-ktx:$core_ktx"
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.2.0-alpha01'
    implementation "com.google.android.material:material:$material"
    implementation "androidx.work:work-runtime-ktx:$runtime_ktx"

    implementation "com.google.android.gms:play-services-maps:$services_maps"
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.6.1'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.2.0'
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.2.0'


    testImplementation "junit:junit:$junit"
    androidTestImplementation "androidx.test.ext:junit:$junitktx"
    androidTestImplementation "androidx.test.espresso:espresso-core:$espresso"
    testRuntimeOnly "org.junit.vintage:junit-vintage-engine:$junit_vintage"
    testImplementation "org.junit.jupiter:junit-jupiter:$junit_jupiter"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$reflect"
    implementation "androidx.navigation:navigation-fragment-ktx:$navigation"
    //Dagger
    kapt "com.google.dagger:dagger-compiler:$dagger"
    implementation "com.google.dagger:dagger:$dagger"
    annotationProcessor "com.google.dagger:dagger-compiler:$dagger"
    annotationProcessor "com.google.dagger:dagger-android-processor:$dagger"
//    annotationProcessor "androidx.lifecycle:lifecycle-common-java8:$dagger"
    //Coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle"
    // Room components
    implementation "androidx.room:room-runtime:$room"
    annotationProcessor "androidx.room:room-compiler:$room"
    androidTestImplementation "androidx.room:room-testing:$room"
    //Retrofit
    implementation "com.squareup.retrofit2:retrofit:$retrofit2"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit2"
    implementation "com.squareup.retrofit2:adapter-rxjava2:$retrofit2"
    //graphql converter
    implementation "com.squareup.retrofit2:converter-scalars:$retrofit2"
    //Apollo
    implementation("com.apollographql.apollo3:apollo-runtime:3.3.2")
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle"
    //Mockito
    testImplementation "org.mockito:mockito-core:$mockito_core"
    testImplementation "org.mockito.kotlin:mockito-kotlin:$mockito_kotlin"
    testImplementation "io.mockk:mockk:$mockk"
    //Firebase
    implementation platform("com.google.firebase:firebase-bom:$firebase_bom")
    implementation "com.google.android.gms:play-services-auth:$play_services_auth"
    implementation 'com.google.firebase:firebase-auth-ktx'
    implementation 'com.google.firebase:firebase-messaging-ktx'
    implementation 'com.google.firebase:firebase-crashlytics'
    implementation "com.google.firebase:firebase-analytics-ktx:$analytics_ktx"
    //Lifecycle
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycle_extensions"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle"


    //lottie player
    implementation("com.airbnb.android:lottie:$lottie") {
        exclude group: "com.android.support"
    }
    //Pendo
//    implementation group:'sdk.pendo.io' , name:'pendoIO', version:"2.17.0.4509", changing:true

    //Segment
    implementation "com.segment.analytics.android:analytics:$analytics"
    implementation "com.segment.analytics.kotlin:android:1.10.0"

    //Camera-x
    def camerax_version = "1.2.3"
    implementation "androidx.camera:camera-core:${camerax_version}"
    implementation "androidx.camera:camera-camera2:${camerax_version}"
    implementation "androidx.camera:camera-lifecycle:${camerax_version}"
    implementation "androidx.camera:camera-video:${camerax_version}"
    implementation "androidx.camera:camera-view:${camerax_version}"
    implementation "androidx.camera:camera-extensions:${camerax_version}"

    //courier
    implementation 'com.github.trycourier:courier-android:2.0.2'

    //RxJava
    implementation 'io.reactivex.rxjava3:rxjava:3.1.5'
    implementation "io.reactivex.rxjava2:rxjava:$rxjava"
    implementation "io.reactivex.rxjava2:rxandroid:$rxandroid"
}

apollo {
    service("weather") {
        sourceFolder.set("weather")
        packageName.set("weather")
    }
    service("rocketreserver") {
        sourceFolder.set("com/example/rocketreserver")
        packageName.set("com.example.rocketreserver")
    }
}