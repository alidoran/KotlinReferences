plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'com.google.devtools.ksp'
    id 'com.google.dagger.hilt.android'
    id 'jacoco'
}

task jacocoReport(type: JacocoReport, dependsOn: 'testDebugUnitTest') {
    reports {
        csv { enabled false }
        xml { enabled false }
        html {
            enabled true
            destination file("${buildDir}/coverage-report")
        }
    }

    // Setup the .class, source, and execution directories
    final fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', 'android/**/*.*']

    // Include this if you use Kotlin
    final kotlinTree = fileTree(dir: "${project.buildDir}/tmp/kotlin-classes/debug", excludes: fileFilter)
    final javacTree = fileTree(dir: "${project.buildDir}/intermediates/javac/debug", excludes: fileFilter)
    final mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories.setFrom files([mainSrc])
    classDirectories.setFrom files([kotlinTree, javacTree])
    executionData.setFrom fileTree(dir: project.buildDir, includes: [
            'jacoco/testDebugUnitTest.exec', 'outputs/code-coverage/connected/*coverage.ec'
    ])
}

android {
    compileSdk rootProject.compile_target_sdk

    defaultConfig {
        applicationId "android.test"
        minSdk rootProject.compile_min_sdk
        targetSdk rootProject.compile_target_sdk
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
    }
    packagingOptions {
        resources {
            excludes += ['META-INF/LICENSE.md', 'META-INF/LICENSE-notice.md']
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = '17'
    }

    testOptions {
        unitTests.all {
            useJUnitPlatform()
            systemProperty "junit.jupiter.testinstance.lifecycle.default", "per_method"
            //Test default instance will be changed by this line
            systemProperty "junit.jupiter.execution.parallel.enabled", "true"
        }
    }

    testOptions.unitTests {
        includeAndroidResources = true
    }

    buildFeatures {
        viewBinding true
    }
    namespace 'android.test'
}

dependencies {
    implementation project(":commonlibrary")
    implementation "androidx.appcompat:appcompat:$appcompat"
    implementation "com.google.android.material:material:$material"
    implementation "androidx.test.ext:junit-ktx:$junitktx"
    implementation "androidx.constraintlayout:constraintlayout-core:1.0.4"
    implementation "androidx.constraintlayout:constraintlayout-compose:1.0.1"
    implementation "androidx.test:monitor:$test_monitor"
    implementation "androidx.activity:activity-ktx:$activity_ktx"

    implementation "androidx.fragment:fragment-ktx:$fragment_ktx"
    implementation "androidx.test:runner:$test_runner"
    implementation "androidx.databinding:databinding-runtime:$databinding_runtime"
    implementation "androidx.core:core-ktx:$core_ktx"
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.1'
    androidTestImplementation project(':android_test')
    debugImplementation "androidx.fragment:fragment-testing:$fragment_ktx"

    testImplementation "junit:junit:$junit"
    testRuntimeOnly "org.junit.vintage:junit-vintage-engine:$junit_vintage"
    testImplementation "org.junit.jupiter:junit-jupiter:$junit_jupiter"
    testImplementation "androidx.test:core:$test_core"
    androidTestImplementation "org.junit.jupiter:junit-jupiter:$junit_jupiter"
    androidTestImplementation 'androidx.test:rules:1.5.0'


    //Mock
    testImplementation "io.mockk:mockk:1.13.4"
    testImplementation "androidx.arch.core:core-testing:$core_testing"
    testImplementation "org.mockito:mockito-core:$mockito_core"
    testImplementation "org.mockito:mockito-inline:3.11.2"
    androidTestImplementation "org.mockito:mockito-android:5.9.0"
    testImplementation "org.mockito.kotlin:mockito-kotlin:4.1.0"

    //espresso
    androidTestImplementation "androidx.test.espresso:espresso-core:$espresso"
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.13.4'

    //Human readable
    testImplementation "org.hamcrest:hamcrest-all:$hamcrestVersion" //Suggested in the Google test course
    testImplementation "org.amshove.kluent:kluent:$kluent"

    //Robolectric
    testImplementation "org.robolectric:robolectric:$robolectricVersion"

    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:1.6.4"

    //Hilt
    implementation "com.google.dagger:hilt-android:2.50"
    ksp "com.google.dagger:hilt-compiler:2.50"
    testImplementation 'com.google.dagger:hilt-android-testing:2.50'
    kspTest 'com.google.dagger:hilt-compiler:2.50'
    androidTestImplementation  'com.google.dagger:hilt-android-testing:2.50'
    kspAndroidTest 'com.google.dagger:hilt-compiler:2.50'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.7.0'


    testImplementation 'org.powermock:powermock-module-junit4:1.7.3'
}

jacoco {
    toolVersion = "0.8.11"
    reportsDirectory = layout.buildDirectory.dir('customJacocoReportDir')
}

//ksp {
//    correctErrorTypes true
//}
